# ========================================
# üêü Fish Classification System - Makefile
# ========================================
# –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è MLOps —Å–∏—Å—Ç–µ–º—ã

.PHONY: help init deploy destroy clean status test

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
NC := \033[0m

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TERRAFORM_DIR := terraform
K8S_DIR := k8s
DOCKER_DIR := docker
DATASET_SOURCE := ../Finalwork/datasets_final
REGISTRY := cr.yandex

# ========================================
# Help
# ========================================

help: ## üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "$(BLUE)üêü Fish Classification System - Makefile$(NC)"
	@echo ""
	@echo "$(GREEN)–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | \
		awk 'BEGIN {FS = ":.*?## "}; {printf "  $(YELLOW)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ""

# ========================================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# ========================================

init: ## üöÄ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
	@echo "$(BLUE)üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞...$(NC)"
	@if [ ! -f $(TERRAFORM_DIR)/terraform.tfvars ]; then \
		echo "$(RED)‚ùå –§–∞–π–ª terraform.tfvars –Ω–µ –Ω–∞–π–¥–µ–Ω!$(NC)"; \
		echo "$(YELLOW)–°–∫–æ–ø–∏—Ä—É–π—Ç–µ terraform.tfvars.example –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è:$(NC)"; \
		echo "  cp $(TERRAFORM_DIR)/terraform.tfvars.example $(TERRAFORM_DIR)/terraform.tfvars"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ terraform.tfvars$(NC)"
	@cd $(TERRAFORM_DIR) && terraform init
	@echo "$(GREEN)‚úÖ Terraform –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω$(NC)"

check-tools: ## üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
	@echo "$(BLUE)üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...$(NC)"
	@command -v terraform >/dev/null 2>&1 || { echo "$(RED)‚ùå terraform –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω$(NC)"; exit 1; }
	@command -v yc >/dev/null 2>&1 || { echo "$(RED)‚ùå yc CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω$(NC)"; exit 1; }
	@command -v kubectl >/dev/null 2>&1 || { echo "$(RED)‚ùå kubectl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω$(NC)"; exit 1; }
	@command -v docker >/dev/null 2>&1 || { echo "$(RED)‚ùå docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω$(NC)"; exit 1; }
	@echo "$(GREEN)‚úÖ –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

# ========================================
# Terraform - –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
# ========================================

terraform-plan: init ## üìã Terraform plan - –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
	@echo "$(BLUE)üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∞ Terraform...$(NC)"
	@cd $(TERRAFORM_DIR) && terraform plan

terraform-apply: init ## üèóÔ∏è  Terraform apply - —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
	@echo "$(BLUE)üèóÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã...$(NC)"
	@cd $(TERRAFORM_DIR) && terraform apply -auto-approve
	@echo "$(GREEN)‚úÖ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞$(NC)"
	@$(MAKE) save-outputs

save-outputs: ## üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å outputs Terraform
	@echo "$(BLUE)üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ outputs...$(NC)"
	@cd $(TERRAFORM_DIR) && terraform output -json > ../deployment_outputs.json
	@echo "$(GREEN)‚úÖ Outputs —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ deployment_outputs.json$(NC)"

# ========================================
# Kubernetes - –ù–∞—Å—Ç—Ä–æ–π–∫–∞
# ========================================

configure-kubectl: ## ‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–∏—Ç—å kubectl –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞
	@echo "$(BLUE)‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ kubectl...$(NC)"
	@CLUSTER_ID=$$(cd $(TERRAFORM_DIR) && terraform output -raw k8s_cluster_id 2>/dev/null); \
	if [ -z "$$CLUSTER_ID" ]; then \
		echo "$(RED)‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å cluster ID$(NC)"; \
		exit 1; \
	fi; \
	yc managed-kubernetes cluster get-credentials $$CLUSTER_ID --external --force
	@echo "$(GREEN)‚úÖ kubectl –Ω–∞—Å—Ç—Ä–æ–µ–Ω$(NC)"

wait-for-cluster: configure-kubectl ## ‚è≥ –î–æ–∂–¥–∞—Ç—å—Å—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞
	@echo "$(BLUE)‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞...$(NC)"
	@for i in $$(seq 1 60); do \
		if kubectl get nodes >/dev/null 2>&1; then \
			echo "$(GREEN)‚úÖ –ö–ª–∞—Å—Ç–µ—Ä –≥–æ—Ç–æ–≤$(NC)"; \
			kubectl get nodes; \
			break; \
		fi; \
		echo "–ü–æ–ø—ã—Ç–∫–∞ $$i/60..."; \
		sleep 10; \
	done

deploy-k8s: wait-for-cluster ## üö¢ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ Kubernetes
	@echo "$(BLUE)üö¢ –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ Kubernetes –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...$(NC)"
	
	@echo "$(YELLOW)üì¶ –°–æ–∑–¥–∞–Ω–∏–µ namespaces...$(NC)"
	@kubectl apply -f $(K8S_DIR)/namespace.yaml
	
	@echo "$(YELLOW)üíæ –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ Redis...$(NC)"
	@kubectl apply -f $(K8S_DIR)/redis/
	@kubectl wait --for=condition=available --timeout=300s deployment/redis -n ml-inference || true
	
	@echo "$(GREEN)‚úÖ –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–∞$(NC)"
	@echo "$(BLUE)‚ÑπÔ∏è  Kafka —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç –∫–∞–∫ Managed Service (—Å–º. Terraform outputs)$(NC)"

# ========================================
# Docker - –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
# ========================================

build-images: ## üê≥ –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑—ã
	@echo "$(BLUE)üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤...$(NC)"
	@$(MAKE) build-api
	@$(MAKE) build-worker

build-api: ## üî® –°–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑ API
	@echo "$(YELLOW)üî® –°–±–æ—Ä–∫–∞ fish-classification-api...$(NC)"
	@docker build -f $(DOCKER_DIR)/Dockerfile.api -t fish-classification-api:latest .
	@echo "$(GREEN)‚úÖ API –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω$(NC)"

build-worker: ## üî® –°–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑ Worker
	@echo "$(YELLOW)üî® –°–±–æ—Ä–∫–∞ fish-classification-worker...$(NC)"
	@docker build -f $(DOCKER_DIR)/Dockerfile.worker -t fish-classification-worker:latest .
	@echo "$(GREEN)‚úÖ Worker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω$(NC)"

push-images: build-images ## üì§ Push –æ–±—Ä–∞–∑–æ–≤ –≤ registry
	@echo "$(BLUE)üì§ Push –æ–±—Ä–∞–∑–æ–≤ –≤ Yandex Container Registry...$(NC)"
	@REGISTRY_ID=$$(cd $(TERRAFORM_DIR) && terraform output -raw container_registry_id 2>/dev/null || echo ""); \
	if [ -z "$$REGISTRY_ID" ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  Container Registry –Ω–µ —Å–æ–∑–¥–∞–Ω –≤ Terraform$(NC)"; \
		echo "$(YELLOW)–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ registry –≤—Ä—É—á–Ω—É—é$(NC)"; \
	else \
		docker tag fish-classification-api:latest $(REGISTRY)/$$REGISTRY_ID/fish-classification-api:latest; \
		docker tag fish-classification-worker:latest $(REGISTRY)/$$REGISTRY_ID/fish-classification-worker:latest; \
		docker push $(REGISTRY)/$$REGISTRY_ID/fish-classification-api:latest; \
		docker push $(REGISTRY)/$$REGISTRY_ID/fish-classification-worker:latest; \
		echo "$(GREEN)‚úÖ –û–±—Ä–∞–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ registry$(NC)"; \
	fi

# ========================================
# –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
# ========================================

create-secrets: ## üîê –°–æ–∑–¥–∞—Ç—å Kubernetes secrets
	@echo "$(BLUE)üîê –°–æ–∑–¥–∞–Ω–∏–µ secrets...$(NC)"
	@POSTGRES_PASSWORD=$$(cd $(TERRAFORM_DIR) && terraform output -raw postgres_mlops_password 2>/dev/null); \
	kubectl create secret generic postgres-secrets \
		--from-literal=mlops-password="$$POSTGRES_PASSWORD" \
		-n ml-inference \
		--dry-run=client -o yaml | kubectl apply -f -
	@echo "$(GREEN)‚úÖ Secrets —Å–æ–∑–¥–∞–Ω—ã$(NC)"

update-k8s-manifests: ## üìù –û–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ K8s –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞—Ö
	@echo "$(BLUE)üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ K8s –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤...$(NC)"
	@MLFLOW_IP=$$(cd $(TERRAFORM_DIR) && terraform output -raw mlflow_vm_ip 2>/dev/null); \
	POSTGRES_HOST=$$(cd $(TERRAFORM_DIR) && terraform output -raw postgres_host 2>/dev/null); \
	REGISTRY_ID=$$(cd $(TERRAFORM_DIR) && terraform output -raw container_registry_id 2>/dev/null || echo "local"); \
	\
	sed -i.bak "s|{{ MLFLOW_HOST }}|$$MLFLOW_IP|g" $(K8S_DIR)/inference-api/deployment.yaml; \
	sed -i.bak "s|{{ MLFLOW_HOST }}|$$MLFLOW_IP|g" $(K8S_DIR)/ml-workers/deployment.yaml; \
	sed -i.bak "s|{{ POSTGRES_HOST }}|$$POSTGRES_HOST|g" $(K8S_DIR)/ml-workers/deployment.yaml; \
	sed -i.bak "s|{{ REGISTRY }}|$(REGISTRY)/$$REGISTRY_ID|g" $(K8S_DIR)/inference-api/deployment.yaml; \
	sed -i.bak "s|{{ REGISTRY }}|$(REGISTRY)/$$REGISTRY_ID|g" $(K8S_DIR)/ml-workers/deployment.yaml; \
	rm -f $(K8S_DIR)/inference-api/*.bak $(K8S_DIR)/ml-workers/*.bak
	@echo "$(GREEN)‚úÖ –ú–∞–Ω–∏—Ñ–µ—Å—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

deploy-apps: create-secrets update-k8s-manifests ## üöÄ –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å API –∏ Workers
	@echo "$(BLUE)üöÄ –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...$(NC)"
	
	@echo "$(YELLOW)üåê –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ Inference API...$(NC)"
	@kubectl apply -f $(K8S_DIR)/inference-api/
	
	@echo "$(YELLOW)üë∑ –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ ML Workers...$(NC)"
	@kubectl apply -f $(K8S_DIR)/ml-workers/
	
	@echo "$(GREEN)‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã$(NC)"
	@$(MAKE) status

# ========================================
# –î–∞—Ç–∞—Å–µ—Ç
# ========================================

copy-dataset: ## üìÅ –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç –∏–∑ Finalwork
	@echo "$(BLUE)üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞...$(NC)"
	@if [ -d "../Finalwork/datasets_final" ]; then \
		cp -r ../Finalwork/datasets_final ./datasets_final; \
		echo "$(GREEN)‚úÖ –î–∞—Ç–∞—Å–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ ./datasets_final$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  –î–∞—Ç–∞—Å–µ—Ç ../Finalwork/datasets_final –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
		echo "$(YELLOW)–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–∞—Ç–∞—Å–µ—Ç –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—É—Ç—å$(NC)"; \
	fi

upload-dataset: ## ‚òÅÔ∏è  –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞—Ç–∞—Å–µ—Ç –≤ S3
	@echo "$(BLUE)‚òÅÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –≤ S3...$(NC)"
	@if [ -x ./scripts/upload_dataset.sh ]; then \
		./scripts/upload_dataset.sh; \
	else \
		echo "$(RED)‚ùå –°–∫—Ä–∏–ø—Ç upload_dataset.sh –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π$(NC)"; \
		exit 1; \
	fi

generate-ssh-key: ## üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SSH –∫–ª—é—á –¥–ª—è DataProc
	@echo "$(BLUE)üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSH –∫–ª—é—á–∞...$(NC)"
	@if [ -x ./scripts/generate_ssh_key.sh ]; then \
		./scripts/generate_ssh_key.sh; \
	else \
		echo "$(RED)‚ùå –°–∫—Ä–∏–ø—Ç generate_ssh_key.sh –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
		exit 1; \
	fi

setup-airflow: ## üå¨Ô∏è  –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Airflow (–∑–∞–≥—Ä—É–∑–∏—Ç—å DAG –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
	@echo "$(BLUE)üå¨Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Airflow...$(NC)"
	@if [ -x ./scripts/setup_airflow.sh ]; then \
		./scripts/setup_airflow.sh; \
	else \
		echo "$(RED)‚ùå –°–∫—Ä–∏–ø—Ç setup_airflow.sh –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π$(NC)"; \
		exit 1; \
	fi

wait-for-airflow: ## ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Airflow
	@echo "$(BLUE)‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Airflow...$(NC)"
	@AIRFLOW_URL=$$(cd $(TERRAFORM_DIR) && terraform output -raw airflow_webserver_url 2>/dev/null); \
	if [ -z "$$AIRFLOW_URL" ]; then \
		echo "$(RED)‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL Airflow$(NC)"; \
		exit 1; \
	fi; \
	echo "   –ü—Ä–æ–≤–µ—Ä–∫–∞: $$AIRFLOW_URL/health"; \
	MAX_ATTEMPTS=60; \
	ATTEMPT=0; \
	while [ $$ATTEMPT -lt $$MAX_ATTEMPTS ]; do \
		if curl -s -o /dev/null -w "%{http_code}" "$$AIRFLOW_URL/health" | grep -q "200"; then \
			echo "$(GREEN)‚úÖ Airflow –≥–æ—Ç–æ–≤!$(NC)"; \
			exit 0; \
		fi; \
		ATTEMPT=$$((ATTEMPT + 1)); \
		echo "   –ü–æ–ø—ã—Ç–∫–∞ $$ATTEMPT/$$MAX_ATTEMPTS..."; \
		sleep 10; \
	done; \
	echo "$(YELLOW)‚ö†Ô∏è  Airflow –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...$(NC)"

# ========================================
# –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ
# ========================================

deploy-inference: ## üêü –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å inference —Å—Ç–µ–∫ (API + Frontend) —Å —Ä–µ–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é
	@echo "$(BLUE)üêü –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ inference —Å—Ç–µ–∫–∞...$(NC)"
	@if [ -x ./scripts/deploy_real_api.sh ]; then \
		./scripts/deploy_real_api.sh; \
	else \
		echo "$(RED)‚ùå –°–∫—Ä–∏–ø—Ç deploy_real_api.sh –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
		exit 1; \
	fi
	@if [ -x ./scripts/deploy_frontend_simple.sh ]; then \
		./scripts/deploy_frontend_simple.sh; \
	else \
		echo "$(RED)‚ùå –°–∫—Ä–∏–ø—Ç deploy_frontend_simple.sh –Ω–µ –Ω–∞–π–¥–µ–Ω$(NC)"; \
		exit 1; \
	fi
	@echo ""
	@echo "$(GREEN)‚úÖ Inference —Å—Ç–µ–∫ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç!$(NC)"
	@echo ""
	@echo "$(BLUE)üåê Frontend –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ NodePort:$(NC)"
	@NODE_IP=$$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}' 2>/dev/null); \
	if [ ! -z "$$NODE_IP" ]; then \
		echo "   http://$$NODE_IP:31649"; \
	else \
		echo "   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP –Ω–æ–¥—ã"; \
	fi
	@echo ""
	@echo "$(GREEN)‚úÖ –†–µ–∞–ª—å–Ω—ã–π API —Å MLflow Model Registry!$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è  API –∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –∏–∑ Production stage –≤ MLflow$(NC)"

deploy-all: check-tools generate-ssh-key terraform-apply deploy-k8s copy-dataset upload-dataset setup-airflow wait-for-airflow deploy-inference ## üéØ –ü–û–õ–ù–û–ï —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
	@echo ""
	@echo "$(GREEN)‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó$(NC)"
	@echo "$(GREEN)‚ïë  ‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–∞!       ‚ïë$(NC)"
	@echo "$(GREEN)‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù$(NC)"
	@echo ""
	@echo "$(GREEN)‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã –∏ –≥–æ—Ç–æ–≤—ã!$(NC)"
	@echo ""
	@echo "$(BLUE)üìä –ß—Ç–æ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ:$(NC)"
	@echo "  ‚úÖ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (Terraform)"
	@echo "  ‚úÖ Kubernetes –∫–ª–∞—Å—Ç–µ—Ä"
	@echo "  ‚úÖ Redis, –†–µ–∞–ª—å–Ω—ã–π API, Frontend"
	@echo "  ‚úÖ MLflow, Grafana"
	@echo "  ‚úÖ Managed Kafka, PostgreSQL, Airflow"
	@echo ""
	@echo "$(YELLOW)‚ö†Ô∏è  –í–ê–ñ–ù–û:$(NC)"
	@echo "  1. –ó–∞–π–¥–∏—Ç–µ –≤ Airflow –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ DAG 'fish_classification_training_full'"
	@echo "  2. –ü–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–π–¥—ë—Ç –≤ Production"
	@echo "  3. Frontend –Ω–∞—á–Ω—ë—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏!"
	@echo ""
	@$(MAKE) print-urls

# ========================================
# –°—Ç–∞—Ç—É—Å –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
# ========================================

status: ## üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
	@echo "$(BLUE)üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:$(NC)"
	@echo ""
	@echo "$(YELLOW)=== Kubernetes Pods ===$(NC)"
	@kubectl get pods -n ml-inference 2>/dev/null || echo "Namespace ml-inference –Ω–µ –Ω–∞–π–¥–µ–Ω"
	@echo ""
	@echo "$(YELLOW)=== Managed Kafka (Yandex Cloud) ===$(NC)"
	@yc managed-kafka cluster list 2>/dev/null || echo "Kafka –∫–ª–∞—Å—Ç–µ—Ä —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ Yandex Cloud"
	@echo ""
	@echo "$(YELLOW)=== Kubernetes Services ===$(NC)"
	@kubectl get svc -n ml-inference 2>/dev/null || true
	@echo ""
	@echo "$(YELLOW)=== HPA ===$(NC)"
	@kubectl get hpa -n ml-inference 2>/dev/null || true

logs-api: ## üìú –õ–æ–≥–∏ Inference API
	@kubectl logs -f deployment/fish-api -n ml-inference --tail=100

logs-worker: ## üìú –õ–æ–≥–∏ ML Worker
	@kubectl logs -f deployment/ml-worker -n ml-inference --tail=100

logs-kafka: ## üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Kafka –∫–ª–∞—Å—Ç–µ—Ä–µ
	@echo "$(BLUE)Kafka —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç –∫–∞–∫ Managed Service$(NC)"
	@yc managed-kafka cluster list

print-urls: ## üîó –ü–æ–∫–∞–∑–∞—Ç—å URL –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(BLUE)üîó URL —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"
	@echo ""
	@echo "$(GREEN)üêü Frontend (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):$(NC)"
	@NODE_IP=$$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}' 2>/dev/null); \
	NODEPORT=$$(kubectl get svc frontend -n ml-inference -o jsonpath='{.spec.ports[0].nodePort}' 2>/dev/null); \
	if [ ! -z "$$NODE_IP" ] && [ ! -z "$$NODEPORT" ]; then \
		echo "   http://$$NODE_IP:$$NODEPORT"; \
		echo "   $(YELLOW)(–∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π IP –Ω–æ–¥—ã —Å —Ç–µ–º –∂–µ –ø–æ—Ä—Ç–æ–º)$(NC)"; \
	else \
		echo "   $(YELLOW)‚è≥ Frontend –µ—â—ë –Ω–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç$(NC)"; \
	fi
	@echo ""
	@echo "$(GREEN)üìä MLflow:$(NC)"
	@cd $(TERRAFORM_DIR) && terraform output -raw mlflow_url 2>/dev/null || echo "   –ù–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç"
	@echo ""
	@echo "$(GREEN)üìà Grafana:$(NC)"
	@cd $(TERRAFORM_DIR) && terraform output -raw grafana_url 2>/dev/null || echo "   –ù–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç"
	@echo "   $(YELLOW)–õ–æ–≥–∏–Ω:$(NC) admin / admin"
	@echo ""
	@echo "$(GREEN)üå¨Ô∏è  Airflow:$(NC)"
	@AIRFLOW_URL=$$(cd $(TERRAFORM_DIR) && terraform output -raw airflow_webserver_url 2>/dev/null || echo ""); \
	if [ ! -z "$$AIRFLOW_URL" ]; then \
		echo "   $$AIRFLOW_URL"; \
		echo "   $(YELLOW)–õ–æ–≥–∏–Ω:$(NC) admin / (—Å–º. terraform.tfvars)"; \
	else \
		echo "   –ù–µ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç"; \
	fi

# ========================================
# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# ========================================

test-api: ## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API
	@echo "$(BLUE)üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...$(NC)"
	@API_IP=$$(kubectl get svc fish-api -n ml-inference -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null); \
	if [ -z "$$API_IP" ]; then \
		echo "$(RED)‚ùå API LoadBalancer –Ω–µ –≥–æ—Ç–æ–≤$(NC)"; \
		exit 1; \
	fi; \
	echo "$(YELLOW)Health check:$(NC)"; \
	curl -s http://$$API_IP/health | jq .; \
	echo ""; \
	echo "$(YELLOW)Readiness check:$(NC)"; \
	curl -s http://$$API_IP/ready | jq .

# ========================================
# –û—á–∏—Å—Ç–∫–∞
# ========================================

clean-k8s: ## üßπ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∏–∑ Kubernetes
	@echo "$(BLUE)üßπ –£–¥–∞–ª–µ–Ω–∏–µ Kubernetes —Ä–µ—Å—É—Ä—Å–æ–≤...$(NC)"
	@kubectl delete -f $(K8S_DIR)/ml-workers/ --ignore-not-found=true
	@kubectl delete -f $(K8S_DIR)/inference-api/ --ignore-not-found=true
	@kubectl delete -f $(K8S_DIR)/redis/ --ignore-not-found=true
	@kubectl delete -f $(K8S_DIR)/namespace.yaml --ignore-not-found=true
	@echo "$(BLUE)‚ÑπÔ∏è  Kafka (Managed Service) –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω —á–µ—Ä–µ–∑ Terraform$(NC)"
	@echo "$(GREEN)‚úÖ Kubernetes —Ä–µ—Å—É—Ä—Å—ã —É–¥–∞–ª–µ–Ω—ã$(NC)"

destroy: ## üóëÔ∏è  –ü–û–õ–ù–û–ï —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
	@echo "$(RED)üóëÔ∏è  –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã...$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è  –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï —Ä–µ—Å—É—Ä—Å—ã!$(NC)"
	@read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? [y/N] " -n 1 -r; \
	echo; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		$(MAKE) clean-k8s; \
		cd $(TERRAFORM_DIR) && terraform destroy -auto-approve; \
		echo "$(GREEN)‚úÖ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞$(NC)"; \
	else \
		echo "$(YELLOW)–û—Ç–º–µ–Ω–µ–Ω–æ$(NC)"; \
	fi

clean: ## üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
	@echo "$(BLUE)üßπ –û—á–∏—Å—Ç–∫–∞...$(NC)"
	@find . -type f -name "*.bak" -delete
	@find . -type f -name "*.pyc" -delete
	@find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	@find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
	@echo "$(GREEN)‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

# ========================================
# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
# ========================================

.DEFAULT_GOAL := help
