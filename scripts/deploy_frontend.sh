#!/bin/bash

# ========================================
# üêü Fish Classification - Frontend Deployment
# ========================================

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üöÄ –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ Frontend –¥–ª—è Fish Classification${NC}"
echo ""

# Get configuration from Terraform outputs
cd terraform
echo -e "${YELLOW}üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ Terraform...${NC}"

K8S_CLUSTER_ID=$(terraform output -raw k8s_cluster_id)
REGISTRY_ID=$(terraform output -raw container_registry_id 2>/dev/null || echo "")

cd ..

# Configure kubectl
echo -e "${YELLOW}‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ kubectl...${NC}"
yc managed-kubernetes cluster get-credentials $K8S_CLUSTER_ID --external --force

# Build Docker image
echo -e "${YELLOW}üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞...${NC}"

if [ -z "$REGISTRY_ID" ]; then
    echo -e "${RED}‚ùå Container Registry ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Terraform outputs${NC}"
    echo -e "${YELLOW}–ò—Å–ø–æ–ª—å–∑—É—é –ª–æ–∫–∞–ª—å–Ω—É—é —Å–±–æ—Ä–∫—É –æ–±—Ä–∞–∑–∞...${NC}"
    FRONTEND_IMAGE="fish-classification-frontend:latest"
else
    FRONTEND_IMAGE="cr.yandexcloud.net/${REGISTRY_ID}/fish-classification-frontend:latest"
fi

docker build -t $FRONTEND_IMAGE frontend/

# Push to registry if using Yandex Container Registry
if [ ! -z "$REGISTRY_ID" ]; then
    echo -e "${YELLOW}üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–∑–∞ –≤ Container Registry...${NC}"
    docker push $FRONTEND_IMAGE
fi

# Update K8s manifest with correct image
echo -e "${YELLOW}üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Kubernetes –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤...${NC}"

# Create temporary manifest with correct image
cat k8s/frontend/deployment.yaml | \
    sed "s|cr.yandexcloud.net/YOUR_REGISTRY_ID/fish-classification-frontend:latest|${FRONTEND_IMAGE}|g" \
    > /tmp/frontend-deployment.yaml

# Deploy to Kubernetes
echo -e "${YELLOW}üö¢ –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ Kubernetes...${NC}"
kubectl apply -f /tmp/frontend-deployment.yaml

# Wait for deployment
echo -e "${YELLOW}‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è...${NC}"
kubectl rollout status deployment/frontend -n ml-inference --timeout=5m

# Get service endpoint
echo ""
echo -e "${GREEN}‚úÖ Frontend —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç!${NC}"
echo ""

# Get LoadBalancer IP
echo -e "${YELLOW}üåê –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP –∞–¥—Ä–µ—Å–∞...${NC}"
echo -e "${BLUE}–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ IP (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã)...${NC}"

for i in {1..30}; do
    EXTERNAL_IP=$(kubectl get svc frontend -n ml-inference -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
    if [ ! -z "$EXTERNAL_IP" ]; then
        break
    fi
    echo -n "."
    sleep 5
done

echo ""

if [ -z "$EXTERNAL_IP" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  –í–Ω–µ—à–Ω–∏–π IP –µ—â—ë –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω${NC}"
    echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤—Ä—É—á–Ω—É—é:${NC}"
    echo -e "  kubectl get svc frontend -n ml-inference -w"
else
    echo -e "${GREEN}‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:${NC}"
    echo ""
    echo -e "${BLUE}üåç  http://${EXTERNAL_IP}${NC}"
    echo ""
    echo -e "${GREEN}–û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É!${NC}"
fi

# Show pod status
echo ""
echo -e "${YELLOW}üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–æ–≤:${NC}"
kubectl get pods -n ml-inference -l app=frontend

# Show service details
echo ""
echo -e "${YELLOW}üîó –î–µ—Ç–∞–ª–∏ —Å–µ—Ä–≤–∏—Å–∞:${NC}"
kubectl get svc frontend -n ml-inference

echo ""
echo -e "${GREEN}‚úÖ –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${NC}"
echo ""
echo -e "${BLUE}üìù –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
echo -e "  –õ–æ–≥–∏:         kubectl logs -f -n ml-inference -l app=frontend"
echo -e "  –°—Ç–∞—Ç—É—Å:       kubectl get all -n ml-inference -l app=frontend"
echo -e "  –ú–∞—Å—à—Ç–∞–±:      kubectl scale deployment frontend -n ml-inference --replicas=3"
echo -e "  –£–¥–∞–ª–∏—Ç—å:      kubectl delete -f k8s/frontend/"
echo ""

