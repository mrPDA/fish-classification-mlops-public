#!/usr/bin/env python3
"""
DataProc Cluster Manager
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ DataProc –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ Yandex Cloud REST API
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Airflow DAG –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
"""

import os
import sys
import time
import json
import requests
from typing import Dict, Optional


class DataProcManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è DataProc –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ REST API"""
    
    def __init__(self, iam_token: str, folder_id: str):
        """
        Args:
            iam_token: IAM —Ç–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            folder_id: ID –∫–∞—Ç–∞–ª–æ–≥–∞ Yandex Cloud
        """
        self.iam_token = iam_token
        self.folder_id = folder_id
        self.base_url = "https://dataproc.api.cloud.yandex.net/dataproc/v1"
        self.headers = {
            "Authorization": f"Bearer {iam_token}",
            "Content-Type": "application/json"
        }
    
    def create_cluster(
        self,
        cluster_name: str,
        zone: str,
        subnet_id: str,
        service_account_id: str,
        security_group_id: str,
        s3_bucket: str,
        ssh_public_keys: list,
        description: str = "DataProc cluster for ML training"
    ) -> str:
        """
        –°–æ–∑–¥–∞—ë—Ç DataProc –∫–ª–∞—Å—Ç–µ—Ä
        
        Returns:
            cluster_id: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞
        """
        print(f"üöÄ –°–æ–∑–¥–∞–Ω–∏–µ DataProc –∫–ª–∞—Å—Ç–µ—Ä–∞: {cluster_name}")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞
        cluster_config = {
            "folderId": self.folder_id,
            "name": cluster_name,
            "description": description,
            "labels": {
                "created_by": "airflow",
                "purpose": "ml_training"
            },
            "configSpec": {
                "versionId": "2.1",  # Hadoop 3.2, Spark 3.0
                "hadoop": {
                    "services": ["HDFS", "YARN", "SPARK", "LIVY"],
                    "properties": {
                        "yarn:yarn.resourcemanager.am.max-attempts": "5",
                        "spark:spark.sql.warehouse.dir": f"s3a://{s3_bucket}/spark-warehouse/"
                    },
                    "sshPublicKeys": ssh_public_keys
                },
                "subclustersSpec": [
                    {
                        "name": "masternode",
                        "role": "MASTERNODE",
                        "resources": {
                            "resourcePresetId": "s2.small",  # 4 vCPU, 16 GB RAM
                            "diskTypeId": "network-ssd",
                            "diskSize": "107374182400"  # 100 GB
                        },
                        "subnetId": subnet_id,
                        "hostsCount": "1"
                    },
                    {
                        "name": "datanode",
                        "role": "DATANODE",
                        "resources": {
                            "resourcePresetId": "s2.small",  # 4 vCPU, 16 GB RAM
                            "diskTypeId": "network-ssd",
                            "diskSize": "107374182400"  # 100 GB
                        },
                        "subnetId": subnet_id,
                        "hostsCount": "2"
                    }
                ]
            },
            "zoneId": zone,
            "serviceAccountId": service_account_id,
            "bucket": s3_bucket,
            "uiProxy": True,
            "securityGroupIds": [security_group_id],
            "deletionProtection": False
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        url = f"{self.base_url}/clusters"
        print(f"üì§ POST {url}")
        print(f"üìã Config: {json.dumps(cluster_config, indent=2)}")
        
        response = requests.post(
            url,
            headers=self.headers,
            json=cluster_config,
            timeout=30
        )
        
        if response.status_code not in [200, 201]:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞: {response.status_code} - {response.text}"
            print(f"‚ùå {error_msg}")
            raise Exception(error_msg)
        
        operation = response.json()
        operation_id = operation.get("id")
        print(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞: {operation_id}")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        cluster_id = self._wait_operation(operation_id)
        print(f"‚úÖ –ö–ª–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω: {cluster_id}")
        
        return cluster_id
    
    def get_cluster_status(self, cluster_id: str) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–ª–∞—Å—Ç–µ—Ä–∞
        
        Returns:
            dict —Å –ø–æ–ª—è–º–∏: status, health
        """
        url = f"{self.base_url}/clusters/{cluster_id}"
        response = requests.get(url, headers=self.headers, timeout=10)
        
        if response.status_code != 200:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code} - {response.text}")
        
        cluster = response.json()
        return {
            "status": cluster.get("status"),
            "health": cluster.get("health"),
            "name": cluster.get("name"),
            "created_at": cluster.get("createdAt")
        }
    
    def wait_cluster_ready(self, cluster_id: str, timeout: int = 1800) -> bool:
        """
        –û–∂–∏–¥–∞–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞
        
        Args:
            cluster_id: ID –∫–ª–∞—Å—Ç–µ—Ä–∞
            timeout: –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –º–∏–Ω—É—Ç)
        
        Returns:
            True –µ—Å–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä –≥–æ—Ç–æ–≤, –∏–Ω–∞—á–µ Exception
        """
        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_id}...")
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            status_info = self.get_cluster_status(cluster_id)
            status = status_info["status"]
            health = status_info["health"]
            
            print(f"  Status: {status}, Health: {health}")
            
            if status == "RUNNING" and health == "ALIVE":
                elapsed = int(time.time() - start_time)
                print(f"‚úÖ –ö–ª–∞—Å—Ç–µ—Ä –≥–æ—Ç–æ–≤! (–∑–∞–Ω—è–ª–æ {elapsed} —Å–µ–∫—É–Ω–¥)")
                return True
            
            if status in ["ERROR", "STOPPING", "STOPPED"]:
                raise Exception(f"–ö–ª–∞—Å—Ç–µ—Ä –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {status}")
            
            time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        
        raise Exception(f"–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞ ({timeout} —Å–µ–∫)")
    
    def delete_cluster(self, cluster_id: str) -> None:
        """–£–¥–∞–ª—è–µ—Ç DataProc –∫–ª–∞—Å—Ç–µ—Ä"""
        print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ DataProc –∫–ª–∞—Å—Ç–µ—Ä–∞: {cluster_id}")
        
        url = f"{self.base_url}/clusters/{cluster_id}"
        response = requests.delete(url, headers=self.headers, timeout=30)
        
        if response.status_code not in [200, 204]:
            error_msg = f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞: {response.status_code} - {response.text}"
            print(f"‚ùå {error_msg}")
            raise Exception(error_msg)
        
        operation = response.json()
        operation_id = operation.get("id")
        print(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞: {operation_id}")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        self._wait_operation(operation_id)
        print(f"‚úÖ –ö–ª–∞—Å—Ç–µ—Ä —É–¥–∞–ª—ë–Ω: {cluster_id}")
    
    def _wait_operation(self, operation_id: str, timeout: int = 3600) -> Optional[str]:
        """
        –û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        
        Returns:
            resource_id –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        url = f"https://operation.api.cloud.yandex.net/operations/{operation_id}"
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            response = requests.get(url, headers=self.headers, timeout=10)
            
            if response.status_code != 200:
                raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {response.status_code}")
            
            operation = response.json()
            done = operation.get("done", False)
            
            if done:
                if "error" in operation:
                    error = operation["error"]
                    raise Exception(f"–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {error}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ä–µ—Å—É—Ä—Å–∞ –∏–∑ metadata –∏–ª–∏ response
                metadata = operation.get("metadata", {})
                response_data = operation.get("response", {})
                
                cluster_id = metadata.get("clusterId") or response_data.get("clusterId")
                return cluster_id
            
            time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        
        raise Exception(f"–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ({timeout} —Å–µ–∫)")
    
    @staticmethod
    def get_iam_token_from_sa_key(sa_key_json: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç IAM —Ç–æ–∫–µ–Ω –∏–∑ JSON –∫–ª—é—á–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        
        Args:
            sa_key_json: JSON —Å—Ç—Ä–æ–∫–∞ —Å –∫–ª—é—á–æ–º —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        
        Returns:
            IAM —Ç–æ–∫–µ–Ω
        """
        import jwt
        
        sa_key = json.loads(sa_key_json)
        
        now = int(time.time())
        payload = {
            'aud': 'https://iam.api.cloud.yandex.net/iam/v1/tokens',
            'iss': sa_key['service_account_id'],
            'iat': now,
            'exp': now + 3600
        }
        
        # –°–æ–∑–¥–∞—ë–º JWT
        encoded_token = jwt.encode(
            payload,
            sa_key['private_key'],
            algorithm='PS256',
            headers={'kid': sa_key['id']}
        )
        
        # –û–±–º–µ–Ω–∏–≤–∞–µ–º JWT –Ω–∞ IAM —Ç–æ–∫–µ–Ω
        response = requests.post(
            'https://iam.api.cloud.yandex.net/iam/v1/tokens',
            json={'jwt': encoded_token},
            timeout=10
        )
        
        if response.status_code != 200:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IAM —Ç–æ–∫–µ–Ω–∞: {response.status_code} - {response.text}")
        
        return response.json()['iamToken']


def main():
    """CLI –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="DataProc Cluster Manager")
    parser.add_argument("action", choices=["create", "delete", "status"], help="–î–µ–π—Å—Ç–≤–∏–µ")
    parser.add_argument("--cluster-id", help="ID –∫–ª–∞—Å—Ç–µ—Ä–∞ (–¥–ª—è delete/status)")
    parser.add_argument("--cluster-name", help="–ò–º—è –∫–ª–∞—Å—Ç–µ—Ä–∞ (–¥–ª—è create)")
    parser.add_argument("--sa-key-file", required=True, help="–ü—É—Ç—å –∫ JSON –∫–ª—é—á—É —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
    parser.add_argument("--folder-id", required=True, help="ID –∫–∞—Ç–∞–ª–æ–≥–∞")
    parser.add_argument("--zone", default="ru-central1-a", help="–ó–æ–Ω–∞")
    parser.add_argument("--subnet-id", help="ID –ø–æ–¥—Å–µ—Ç–∏")
    parser.add_argument("--service-account-id", help="ID —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
    parser.add_argument("--security-group-id", help="ID –≥—Ä—É–ø–ø—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    parser.add_argument("--s3-bucket", help="–ò–º—è S3 –±–∞–∫–µ—Ç–∞")
    parser.add_argument("--ssh-key", help="–ü—É—Ç—å –∫ –ø—É–±–ª–∏—á–Ω–æ–º—É SSH –∫–ª—é—á—É")
    
    args = parser.parse_args()
    
    # –ß–∏—Ç–∞–µ–º –∫–ª—é—á —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    with open(args.sa_key_file, 'r') as f:
        sa_key_json = f.read()
    
    # –ü–æ–ª—É—á–∞–µ–º IAM —Ç–æ–∫–µ–Ω
    print("üîë –ü–æ–ª—É—á–µ–Ω–∏–µ IAM —Ç–æ–∫–µ–Ω–∞...")
    iam_token = DataProcManager.get_iam_token_from_sa_key(sa_key_json)
    print("‚úÖ IAM —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
    
    # –°–æ–∑–¥–∞—ë–º –º–µ–Ω–µ–¥–∂–µ—Ä
    manager = DataProcManager(iam_token, args.folder_id)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    if args.action == "create":
        # –ß–∏—Ç–∞–µ–º SSH –∫–ª—é—á
        with open(args.ssh_key, 'r') as f:
            ssh_key = f.read().strip()
        
        cluster_id = manager.create_cluster(
            cluster_name=args.cluster_name,
            zone=args.zone,
            subnet_id=args.subnet_id,
            service_account_id=args.service_account_id,
            security_group_id=args.security_group_id,
            s3_bucket=args.s3_bucket,
            ssh_public_keys=[ssh_key]
        )
        
        print(f"\n‚úÖ –ö–ª–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω: {cluster_id}")
        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏...")
        manager.wait_cluster_ready(cluster_id)
        print(f"‚úÖ –ö–ª–∞—Å—Ç–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
    elif args.action == "delete":
        manager.delete_cluster(args.cluster_id)
        print(f"‚úÖ –ö–ª–∞—Å—Ç–µ—Ä —É–¥–∞–ª—ë–Ω")
        
    elif args.action == "status":
        status = manager.get_cluster_status(args.cluster_id)
        print(f"\nüìä –°—Ç–∞—Ç—É—Å –∫–ª–∞—Å—Ç–µ—Ä–∞:")
        print(json.dumps(status, indent=2))


if __name__ == "__main__":
    main()
