#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ Yandex Lockbox –≤ Airflow Variables

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ Lockbox
2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏—Ö –≤ Airflow Variables —á–µ—Ä–µ–∑ REST API
3. –ú–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è Airflow
"""

import os
import sys
import json
import requests
import subprocess
from typing import Dict, List
import time


def get_lockbox_variables(secret_id: str) -> Dict[str, str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ Lockbox —á–µ—Ä–µ–∑ yc CLI
    """
    print(f"üì¶ Fetching variables from Lockbox: {secret_id}")
    
    try:
        result = subprocess.run(
            ['yc', 'lockbox', 'payload', 'get', secret_id, '--format', 'json'],
            capture_output=True,
            text=True,
            check=True
        )
        
        payload = json.loads(result.stdout)
        variables = {}
        
        for entry in payload.get('entries', []):
            key = entry.get('key')
            value = entry.get('text_value')
            if key and value:
                variables[key] = value
        
        print(f"‚úÖ Found {len(variables)} variables in Lockbox")
        return variables
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error fetching Lockbox: {e.stderr}")
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"‚ùå Error parsing Lockbox response: {e}")
        sys.exit(1)


def wait_for_airflow(airflow_url: str, timeout: int = 300) -> bool:
    """
    –ñ–¥—ë—Ç, –ø–æ–∫–∞ Airflow —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
    """
    print(f"‚è≥ Waiting for Airflow at {airflow_url} (timeout: {timeout}s)")
    
    start_time = time.time()
    while time.time() - start_time < timeout:
        try:
            response = requests.get(f"{airflow_url}/health", timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ Airflow is ready!")
                return True
        except requests.exceptions.RequestException:
            pass
        
        time.sleep(10)
        print("   Still waiting...")
    
    print(f"‚ùå Airflow did not become ready within {timeout}s")
    return False


def import_variables_to_airflow(
    airflow_url: str,
    username: str,
    password: str,
    variables: Dict[str, str]
) -> None:
    """
    –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Airflow —á–µ—Ä–µ–∑ REST API
    """
    print(f"\nüì§ Importing {len(variables)} variables to Airflow...")
    
    # –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
    session = requests.Session()
    session.auth = (username, password)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    try:
        response = session.get(f"{airflow_url}/api/v1/variables")
        response.raise_for_status()
        print(f"‚úÖ Successfully authenticated to Airflow API")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Failed to authenticate to Airflow API: {e}")
        sys.exit(1)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    success_count = 0
    error_count = 0
    
    for key, value in variables.items():
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
            check_response = session.get(f"{airflow_url}/api/v1/variables/{key}")
            
            if check_response.status_code == 200:
                # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º
                response = session.patch(
                    f"{airflow_url}/api/v1/variables/{key}",
                    json={"key": key, "value": value},
                    headers={"Content-Type": "application/json"}
                )
                action = "Updated"
            else:
                # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º
                response = session.post(
                    f"{airflow_url}/api/v1/variables",
                    json={"key": key, "value": value},
                    headers={"Content-Type": "application/json"}
                )
                action = "Created"
            
            if response.status_code in [200, 201]:
                print(f"   ‚úÖ {action}: {key}")
                success_count += 1
            else:
                print(f"   ‚ùå Failed to import {key}: {response.status_code} - {response.text}")
                error_count += 1
                
        except requests.exceptions.RequestException as e:
            print(f"   ‚ùå Error importing {key}: {e}")
            error_count += 1
    
    print(f"\nüìä Import Summary:")
    print(f"   ‚úÖ Success: {success_count}")
    print(f"   ‚ùå Errors: {error_count}")
    
    if error_count > 0:
        sys.exit(1)


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    print("=" * 80)
    print("üîê Lockbox ‚Üí Airflow Variables Import Tool")
    print("=" * 80)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    lockbox_secret_id = os.getenv('LOCKBOX_SECRET_ID')
    airflow_url = os.getenv('AIRFLOW_URL')
    airflow_username = os.getenv('AIRFLOW_USERNAME', 'admin')
    airflow_password = os.getenv('AIRFLOW_PASSWORD')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if not lockbox_secret_id:
        print("‚ùå LOCKBOX_SECRET_ID environment variable is required")
        print("   Example: export LOCKBOX_SECRET_ID=e6q1el9pcc78q3kmuhcd")
        sys.exit(1)
    
    if not airflow_url:
        print("‚ùå AIRFLOW_URL environment variable is required")
        print("   Example: export AIRFLOW_URL=https://c-xxx.airflow.yandexcloud.net")
        sys.exit(1)
    
    if not airflow_password:
        print("‚ùå AIRFLOW_PASSWORD environment variable is required")
        print("   Example: export AIRFLOW_PASSWORD=your_password")
        sys.exit(1)
    
    print(f"\nüìã Configuration:")
    print(f"   Lockbox Secret ID: {lockbox_secret_id}")
    print(f"   Airflow URL: {airflow_url}")
    print(f"   Airflow Username: {airflow_username}")
    print()
    
    # 1. –ñ–¥—ë–º, –ø–æ–∫–∞ Airflow —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
    if not wait_for_airflow(airflow_url):
        sys.exit(1)
    
    # 2. –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ Lockbox
    variables = get_lockbox_variables(lockbox_secret_id)
    
    # 3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Airflow
    import_variables_to_airflow(
        airflow_url=airflow_url,
        username=airflow_username,
        password=airflow_password,
        variables=variables
    )
    
    print("\n" + "=" * 80)
    print("‚úÖ Import completed successfully!")
    print("=" * 80)


if __name__ == "__main__":
    main()
