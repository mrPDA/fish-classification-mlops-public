/**
 * üêü Fish Classification Frontend
 * JavaScript –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API
 */

// API Configuration - –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const API_BASE_URL = window.API_BASE_URL || '/api';

// DOM Elements
const uploadArea = document.getElementById('uploadArea');
const fileInput = document.getElementById('fileInput');
const previewContainer = document.getElementById('previewContainer');
const previewImage = document.getElementById('previewImage');
const analyzeBtn = document.getElementById('analyzeBtn');
const resetBtn = document.getElementById('resetBtn');
const loadingSpinner = document.getElementById('loadingSpinner');
const resultContainer = document.getElementById('resultContainer');

// Result elements
const speciesName = document.getElementById('speciesName');
const confidenceBar = document.getElementById('confidenceBar');
const confidenceText = document.getElementById('confidenceText');
const processingTime = document.getElementById('processingTime');
const speciesId = document.getElementById('speciesId');
const cacheStatus = document.getElementById('cacheStatus');
const speciesDescription = document.getElementById('speciesDescription');

let selectedFile = null;

// Species information (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–∞—Ö)
const speciesInfo = {
    "Perca Fluviatilis": "–û–∫—É–Ω—å —Ä–µ—á–Ω–æ–π - —Ö–∏—â–Ω–∞—è –ø—Ä–µ—Å–Ω–æ–≤–æ–¥–Ω–∞—è —Ä—ã–±–∞, –æ–±–∏—Ç–∞—é—â–∞—è –≤ —Ä–µ–∫–∞—Ö –∏ –æ–∑—ë—Ä–∞—Ö –ï–≤—Ä–æ–ø—ã –∏ –ê–∑–∏–∏. –ò–º–µ–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Ç—ë–º–Ω—ã–µ –ø–æ–ª–æ—Å—ã –Ω–∞ –±–æ–∫–∞—Ö.",
    "Perccottus Glenii": "–†–æ—Ç–∞–Ω-–≥–æ–ª–æ–≤–µ—à–∫–∞ - –∏–Ω–≤–∞–∑–∏–≤–Ω—ã–π –≤–∏–¥, —Å–ø–æ—Å–æ–±–Ω—ã–π –≤—ã–∂–∏–≤–∞—Ç—å –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö. –û–±–∏—Ç–∞–µ—Ç –≤ –ø—Ä–µ—Å–Ω—ã—Ö –≤–æ–¥–æ—ë–º–∞—Ö –î–∞–ª—å–Ω–µ–≥–æ –í–æ—Å—Ç–æ–∫–∞.",
    "Esox Lucius": "–©—É–∫–∞ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è - –∫—Ä—É–ø–Ω–∞—è —Ö–∏—â–Ω–∞—è —Ä—ã–±–∞ —Å –≤—ã—Ç—è–Ω—É—Ç—ã–º —Ç–µ–ª–æ–º –∏ –º–æ—â–Ω—ã–º–∏ —á–µ–ª—é—Å—Ç—è–º–∏. –í–∞–∂–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –∏ –ø—Ä–æ–º—ã—Å–ª–æ–≤–æ–≥–æ —Ä—ã–±–æ–ª–æ–≤—Å—Ç–≤–∞.",
    "Alburnus Alburnus": "–£–∫–ª–µ–π–∫–∞ - –º–µ–ª–∫–∞—è —Å—Ç–∞–π–Ω–∞—è —Ä—ã–±–∞ —Å —Å–µ—Ä–µ–±—Ä–∏—Å—Ç–æ–π —á–µ—à—É—ë–π. –°–ª—É–∂–∏—Ç –∫–æ—Ä–º–æ–≤–æ–π –±–∞–∑–æ–π –¥–ª—è —Ö–∏—â–Ω—ã—Ö —Ä—ã–±.",
    "Abramis Brama": "–õ–µ—â –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π - –∫—Ä—É–ø–Ω–∞—è –º–∏—Ä–Ω–∞—è —Ä—ã–±–∞ —Å –≤—ã—Å–æ–∫–∏–º —Å–∂–∞—Ç—ã–º —Ç–µ–ª–æ–º. –¶–µ–Ω–Ω—ã–π –ø—Ä–æ–º—ã—Å–ª–æ–≤—ã–π –≤–∏–¥.",
    "Carassius Gibelio": "–ö–∞—Ä–∞—Å—å —Å–µ—Ä–µ–±—Ä—è–Ω—ã–π - –≤—ã–Ω–æ—Å–ª–∏–≤–∞—è —Ä—ã–±–∞, —Å–ø–æ—Å–æ–±–Ω–∞—è –∂–∏—Ç—å –≤ –≤–æ–¥–æ—ë–º–∞—Ö —Å –Ω–∏–∑–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∫–∏—Å–ª–æ—Ä–æ–¥–∞.",
    "Squalius Cephalus": "–ì–æ–ª–∞–≤–ª—å - –≤—Å–µ—è–¥–Ω–∞—è —Ä—ã–±–∞ –∏–∑ —Å–µ–º–µ–π—Å—Ç–≤–∞ –∫–∞—Ä–ø–æ–≤—ã—Ö. –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–µ —Ä–µ–∫–∏ —Å —á–∏—Å—Ç–æ–π –≤–æ–¥–æ–π.",
    "Scardinius Erythrophthalmus": "–ö—Ä–∞—Å–Ω–æ–ø–µ—Ä–∫–∞ - –º–∏—Ä–Ω–∞—è —Ä—ã–±–∞ —Å —è—Ä–∫–∏–º–∏ –∫—Ä–∞—Å–Ω—ã–º–∏ –ø–ª–∞–≤–Ω–∏–∫–∞–º–∏. –û–±–∏—Ç–∞–µ—Ç –≤ –∑–∞—Ä–æ—Å–ª—è—Ö –≤–æ–¥–Ω–æ–π —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.",
    "Rutilus Lacustris": "–ü–ª–æ—Ç–≤–∞ –æ–∑—ë—Ä–Ω–∞—è - –ø—Ä–µ—Å–Ω–æ–≤–æ–¥–Ω–∞—è —Ä—ã–±–∞, –æ–±—Ä–∞–∑—É—é—â–∞—è –∫—Ä—É–ø–Ω—ã–µ —Å—Ç–∞–∏. –í–∞–∂–Ω–∞ –≤ –ø–∏—â–µ–≤–æ–π —Ü–µ–ø–∏ –≤–æ–¥–æ—ë–º–æ–≤.",
    "Rutilus Rutilus": "–ü–ª–æ—Ç–≤–∞ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è - –æ–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä—ã–± –≤ –≤–æ–¥–æ—ë–º–∞—Ö –ï–≤—Ä–æ–ø—ã –∏ –ê–∑–∏–∏.",
    "Blicca Bjoerkna": "–ì—É—Å—Ç–µ—Ä–∞ - —Å—Ç–∞–π–Ω–∞—è –º–∏—Ä–Ω–∞—è —Ä—ã–±–∞, –≤–Ω–µ—à–Ω–µ –ø–æ—Ö–æ–∂–∞—è –Ω–∞ –ª–µ—â–∞, –Ω–æ –º–µ–Ω—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤.",
    "Gymnocephalus Cernua": "–Å—Ä—à –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π - –º–µ–ª–∫–∞—è –¥–æ–Ω–Ω–∞—è —Ä—ã–±–∞ —Å –∫–æ–ª—é—á–∏–º–∏ –ø–ª–∞–≤–Ω–∏–∫–∞–º–∏. –ê–∫—Ç–∏–≤–µ–Ω –∫—Ä—É–≥–ª—ã–π –≥–æ–¥.",
    "Leuciscus Idus": "–Ø–∑—å - –∫—Ä—É–ø–Ω–∞—è –≤—Å–µ—è–¥–Ω–∞—è —Ä—ã–±–∞ —Å –∑–æ–ª–æ—Ç–∏—Å—Ç—ã–º –æ—Ç–ª–∏–≤–æ–º. –û–±–∏—Ç–∞–µ—Ç –≤ —Ä–µ–∫–∞—Ö –∏ –æ–∑—ë—Ä–∞—Ö —Å —á–∏—Å—Ç–æ–π –≤–æ–¥–æ–π.",
    "Sander Lucioperca": "–°—É–¥–∞–∫ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π - —Ü–µ–Ω–Ω–∞—è —Ö–∏—â–Ω–∞—è —Ä—ã–±–∞ —Å –æ—Ç–ª–∏—á–Ω—ã–º–∏ –≤–∫—É—Å–æ–≤—ã–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞–º–∏. –ê–∫—Ç–∏–≤–Ω—ã–π –Ω–æ—á–Ω–æ–π —Ö–∏—â–Ω–∏–∫.",
    "Leuciscus Baicalensis": "–ï–ª–µ—Ü —Å–∏–±–∏—Ä—Å–∫–∏–π - –ø—Ä–µ—Å–Ω–æ–≤–æ–¥–Ω–∞—è —Ä—ã–±–∞, –æ–±–∏—Ç–∞—é—â–∞—è –≤ —Ö–æ–ª–æ–¥–Ω—ã—Ö –±—ã—Å—Ç—Ä—ã—Ö —Ä–µ–∫–∞—Ö –°–∏–±–∏—Ä–∏.",
    "Gobio Gobio": "–ü–µ—Å–∫–∞—Ä—å –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π - –Ω–µ–±–æ–ª—å—à–∞—è –¥–æ–Ω–Ω–∞—è —Ä—ã–±–∞, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—â–∞—è –ø–µ—Å—á–∞–Ω–æ–µ –¥–Ω–æ —Ä–µ–∫.",
    "Tinca Tinca": "–õ–∏–Ω—å - –º–∏—Ä–Ω–∞—è –¥–æ–Ω–Ω–∞—è —Ä—ã–±–∞ —Å —Ç–æ–ª—Å—Ç—ã–º —Å–ª–∏–∑–∏—Å—Ç—ã–º —Ç–µ–ª–æ–º. –û–±–∏—Ç–∞–µ—Ç –≤ –∑–∞—Ä–æ—Å—à–∏—Ö –≤–æ–¥–æ—ë–º–∞—Ö."
};

// ========================================
// Event Listeners
// ========================================

// Click to upload
uploadArea.addEventListener('click', () => {
    fileInput.click();
});

// Drag and drop
uploadArea.addEventListener('dragover', (e) => {
    e.preventDefault();
    uploadArea.classList.add('dragover');
});

uploadArea.addEventListener('dragleave', () => {
    uploadArea.classList.remove('dragover');
});

uploadArea.addEventListener('drop', (e) => {
    e.preventDefault();
    uploadArea.classList.remove('dragover');
    const file = e.dataTransfer.files[0];
    handleFileSelect(file);
});

// File input change
fileInput.addEventListener('change', (e) => {
    const file = e.target.files[0];
    handleFileSelect(file);
});

// Analyze button
analyzeBtn.addEventListener('click', () => {
    if (selectedFile) {
        analyzeFish();
    }
});

// Reset button
resetBtn.addEventListener('click', () => {
    resetUpload();
});

// ========================================
// Functions
// ========================================

function handleFileSelect(file) {
    if (!file) return;

    // Validate file type
    if (!file.type.startsWith('image/')) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!');
        return;
    }

    // Validate file size (10MB max)
    if (file.size > 10 * 1024 * 1024) {
        alert('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB');
        return;
    }

    selectedFile = file;

    // Show preview
    const reader = new FileReader();
    reader.onload = (e) => {
        previewImage.src = e.target.result;
        uploadArea.style.display = 'none';
        previewContainer.style.display = 'block';
        resultContainer.style.display = 'none';
    };
    reader.readAsDataURL(file);
}

function resetUpload() {
    selectedFile = null;
    fileInput.value = '';
    uploadArea.style.display = 'block';
    previewContainer.style.display = 'none';
    loadingSpinner.style.display = 'none';
    resultContainer.style.display = 'none';
}

async function analyzeFish() {
    if (!selectedFile) return;

    // Hide buttons, show loading
    analyzeBtn.disabled = true;
    resetBtn.style.display = 'none';
    loadingSpinner.style.display = 'block';
    resultContainer.style.display = 'none';

    try {
        // Create FormData
        const formData = new FormData();
        formData.append('file', selectedFile);

        // Call API
        const response = await fetch(`${API_BASE_URL}/predict`, {
            method: 'POST',
            body: formData
        });

        if (!response.ok) {
            throw new Error(`API Error: ${response.status} ${response.statusText}`);
        }

        const result = await response.json();
        displayResult(result);

    } catch (error) {
        console.error('Error:', error);
        alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${error.message}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n1. API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω\n2. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ\n3. –ï—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏`);
        
        // Reset to allow retry
        analyzeBtn.disabled = false;
        resetBtn.style.display = 'inline-block';
        loadingSpinner.style.display = 'none';
    }
}

function displayResult(result) {
    // Hide loading, show results
    loadingSpinner.style.display = 'none';
    resultContainer.style.display = 'block';
    resetBtn.style.display = 'inline-block';

    // Populate result data
    speciesName.textContent = result.species_name || 'Unknown';
    speciesId.textContent = result.species_id || '-';
    
    // Confidence bar
    const confidence = Math.round(result.confidence * 100);
    confidenceBar.style.width = `${confidence}%`;
    confidenceBar.setAttribute('aria-valuenow', confidence);
    confidenceText.textContent = `${confidence}%`;
    
    // Set confidence bar color based on value
    if (confidence >= 80) {
        confidenceBar.style.background = 'linear-gradient(90deg, #198754 0%, #20c997 100%)';
    } else if (confidence >= 60) {
        confidenceBar.style.background = 'linear-gradient(90deg, #ffc107 0%, #ffca2c 100%)';
    } else {
        confidenceBar.style.background = 'linear-gradient(90deg, #dc3545 0%, #e35d6a 100%)';
    }
    
    // Processing time
    processingTime.textContent = Math.round(result.processing_time_ms || 0);
    
    // Cache status
    cacheStatus.textContent = result.cached ? 'üü¢ Cached' : 'üîµ New';
    
    // Species description
    speciesDescription.textContent = speciesInfo[result.species_name] || 
        '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω–æ–º –≤–∏–¥–µ —Ä—ã–±—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.';

    // Scroll to results
    resultContainer.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
}

// ========================================
// API Health Check on Load
// ========================================

async function checkAPIHealth() {
    try {
        const response = await fetch(`${API_BASE_URL}/health`);
        const data = await response.json();
        console.log('‚úÖ API Health:', data);
        
        if (!data.model_loaded) {
            console.warn('‚ö†Ô∏è Model not loaded yet. Predictions may be slow on first request.');
        }
    } catch (error) {
        console.error('‚ùå API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω:', error);
        console.log('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Inference API –∑–∞–ø—É—â–µ–Ω –Ω–∞', API_BASE_URL);
    }
}

// Check API on page load
checkAPIHealth();

// ========================================
// Statistics (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
// ========================================

let stats = {
    totalRequests: 0,
    cachedRequests: 0,
    avgConfidence: 0
};

function updateStats(result) {
    stats.totalRequests++;
    if (result.cached) {
        stats.cachedRequests++;
    }
    
    // Update average confidence
    const confidences = JSON.parse(localStorage.getItem('confidences') || '[]');
    confidences.push(result.confidence);
    if (confidences.length > 100) {
        confidences.shift(); // Keep last 100
    }
    localStorage.setItem('confidences', JSON.stringify(confidences));
    
    stats.avgConfidence = confidences.reduce((a, b) => a + b, 0) / confidences.length;
    
    console.log('üìä Stats:', stats);
}

